#!/usr/bin/env ruby
require 'optparse'
require 'kuport'
require 'json'

using Kuport::ClassExtensions

example_usage = <<~USAGE
  Example usage

  # Get messages
  kuport --id=jx91234 -m


  # Get already read messages
  kuport --id=jx91234 -m read


  # Login only(cache cookies)
  kuport --id=jx91234


  # Download URL as NAME
  kuport --download=NAME:URL


  # Download message attachment
  json="$(kuport --id jx91234 -m | jq '.[0].links')"
  kuport --download="$json"


  # Interactively download message attachment
  go get github.com/simeji/jid/cmd/jid
  kuport --download="$(kuport --id jx91234 -m | jid)"

  # Download specific subjects materials
  kuport --materials | kuport --filter='subject:Computer' | kuport --download
USAGE

def debug?
  nil != ENV['DEBUG_KUPORT']
end

require 'pry' if debug?

$kuport_human_readable = STDOUT.tty?
RC_FILE = File.expand_path('~/.kuportrc.json')

def putj(obj)
  if $kuport_human_readable
    puts JSON.pretty_generate(obj)
  else
    puts obj.to_json
  end
end

parser = OptionParser.new do |o|
  def o.options
    @options ||= {}
  end

  def o.on_setopt(symbol, short, long, *desc)
    on(short, long, *desc){|arg| options[symbol] = block_given? ? yield(arg) : arg}
  end

  # 候補からデフォルト値をセットする
  def o.on_select(symbol, short, long, cands, *desc)
    on_setopt(symbol, short, long, cands, cands.join(' | '), *desc){|arg| arg || cands[0]}
  end

  o.program_name= 'kuport'
  o.version = Kuport::VERSION
  o.banner = 'KUPORT - Get data as a JSON from Kuport'
  o.on_head('Usage: kuport [options]')
  # sumarry_width=32, summary_indent=' '*4,


  o.on_setopt(:id,            '-I', '--id=ID', 'Student number')
  o.on_setopt(:filter,        '-F', '--filter=KEY:PATTERN', 'Filter JSON contents')
  o.on_setopt(:download,      '-D', '--download=[-|NAME:URL|JSON]',
              'Download file.',
              'Download URL file as NAME',
              'JSON contain [{name: "FILE", path: "URL"}, ...]',
              "'-' read NAME:URL or JSON from stdin"){|v| v || '-'}
  o.on_setopt(:clear_cookies, '-C', '--clear-cookies')
  o.on_setopt(:proxy,         '-P', '--proxy=SERVER:PORT')
  o.on_setopt(:human_readable,'-H', '--[no-]human-readable'){|v| $kuport_human_readable = v}
  o.separator('')

  o.on_select(:messages, '-m', '--messages=[TYPE]', %i[default read backno],
              "read\tAlready read messages",
              "backno\tBack number messages(Unimplemented)")
  o.on_setopt(:materials, '-d', '--materials')
  o.on_select(:timetable, '-t', '--timetable=[TYPE]', %i[default compact])
  o.separator('')

  o.separator('')
  o.separator('------------------------------------------------------------')
  o.on_tail(example_usage)
end

ARGV << '--help' if ARGV.empty?
parser.permute!(ARGV)
opts = parser.options

# read config
if File.readable?(RC_FILE)
  config = JSON.parse(File.read(RC_FILE), { symbolize_names: true })
  opts.merge!(config) {|key, old, new| old }
end

if debug?
  warn "opts #{opts}"
  warn "ARGV #{ARGV}"
end

# kp = KuportView.new
kp = Kuport.new(opts)

if opts[:clear_cookies]
  kp.cookies_clear
  exit unless opts[:id]
end

if opts[:filter]
  key,pattern = opts[:filter].split(':', 2)
  putj Kuport.filter(key, pattern)
  exit
end

if opts[:id]
  kp.login(opts[:id])
end

if opts[:download]
  opts[:download] = STDIN.read if opts[:download] == '-'

  name,url = opts[:download].split(':', 2)
  if url.url?
    # NAME:URL
    kp.download_file(name, url)
  else
    # JSON
    kp.download_with_json(opts[:download])
  end
end

# get data
Kuport.quit('Please login', 32) unless kp.loggedin?


# messages
if opts[:messages]
  mes = case opts[:messages]
  when :default
    kp.messages
  when :raed
    kp.messages_read
  when :backno
    kp.messages_backno
  end

  putj mes
end

# timetable
if opts[:timetable]
  table = kp.timetable
  table.compact if opts[:timetable] == :compact
  putj table
end

# materials
if opts.has_key?(:materials)
  mat = kp.materials
  putj mat
end

if debug?
  require 'pry'
  binding.pry
end
